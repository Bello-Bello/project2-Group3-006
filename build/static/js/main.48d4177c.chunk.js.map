{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","scheduleDict","setScheduleDict","suggestDict","setSuggestDict","eventInput","useRef","startTimeInput","endTimeInput","dateInput","messages","suggestDuration","suggestInput","Schedule","props","item","startTime","endTime","onClick","newDict","filter","event","Suggest","suggest","duration","newSuggestDict","suggestion","class","align","map","dictItem","ref","type","placeholder","for","id","newSuggest","current","value","newSuggestDuration","onAddClickSuggest","newEvent","newStartTime","newEndTime","newScheduleDict","onAddClick","fetch","method","headers","body","JSON","stringify","then","response","json","data","i","message_server","length","alert","schedule_server","suggest_server","response_data","window","location","replace","onCompleteClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48d4177c.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState, useRef } from 'react';\n\n\nfunction App() {\n\n  const [scheduleDict, setScheduleDict] = useState([]);\n  const [suggestDict, setSuggestDict] = useState([]);\n  const eventInput = useRef('');\n  const startTimeInput = useRef('');\n  const endTimeInput = useRef('');\n  const dateInput = useRef('');\n  const messages = useRef('');\n  const suggestDuration = useRef('');\n  const suggestInput = useRef('');\n\n  //React component which returns the schedule list\n  function Schedule(props) {\n\n    function onDelete() {\n      const newDict = scheduleDict.filter((item) => item.event !== props.item);\n      setScheduleDict(newDict);\n    }\n    return (\n      <h2>{props.item} from {props.startTime} to {props.endTime}<button onClick={onDelete}>X</button></h2>\n    );\n  }\n  //React component which returns the suggestions list\n  function Suggest(props) {\n\n    function onDelete() {\n      const newSuggestDict = suggestDict.filter((item) => item.suggestion !== props.suggest);\n      setSuggestDict(newSuggestDict);\n    }\n    return (\n      <h2>{props.suggest} for {props.duration} hours<button onClick={onDelete}>X</button></h2>\n    );\n  }\n  //Function which handles the add schedule event button\n  function onAddClick() {\n    let newEvent = eventInput.current.value;\n    let newStartTime = startTimeInput.current.value;\n    let newEndTime = endTimeInput.current.value;\n    let newScheduleDict = [...scheduleDict, { \"event\": newEvent, \"startTime\": newStartTime, \"endTime\": newEndTime }];\n\n    setScheduleDict(newScheduleDict);\n\n    eventInput.current.value = \"\";\n    startTimeInput.current.value = \"\";\n    endTimeInput.current.value = \"\";\n\n  }\n  //Function which handles the add an event suggestion button\n  function onAddClickSuggest() {\n\n    let newSuggest = suggestInput.current.value;\n    let newSuggestDuration = suggestDuration.current.value;\n\n    let newSuggestDict = [...suggestDict, { \"suggestion\": newSuggest, \"duration\": newSuggestDuration }];\n\n    setSuggestDict(newSuggestDict);\n\n    suggestInput.current.value = \"\";\n    suggestDuration.current.value = \"\";\n  }\n\n  function onSaveClick() {\n\n    fetch('/suggestions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ \"scheduleDict\": scheduleDict, \"suggestDict\": suggestDict, \"messages\": messages }),\n    }).then(response => response.json()).then(data => {\n      for (let i = 0; i < data.message_server.length; i++) {\n        alert(data.message_server[i]);\n      }\n      setScheduleDict(data.schedule_server);\n      setSuggestDict(data.suggest_server);\n    });\n  }\n\n  function onCompleteClick() {\n    const response_data = JSON.stringify({ \"scheduleDict\": scheduleDict, \"currentDate\": dateInput.current.value });\n    fetch('/complete', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: response_data,\n    }).then(response => response.json()).then(data => {\n      setScheduleDict(data.schedule_server);\n      window.location.replace(\"/\");\n    });\n\n  }\n\n  return (\n    <div>\n      <table>\n        <td class=\"suggestions\">\n          <div class=\"display\" align=\"center\">\n            <h1>What I would like to do</h1>\n            <div class=\"suggestList\" align=\"center\">\n              <h2>{suggestDict.map((dictItem) => <Suggest suggest={dictItem.suggestion} duration={dictItem.duration} />)}</h2>\n            </div>\n\n            <input ref={suggestInput} type=\"text\" placeholder=\"Input activity\" />\n            <label for=\"len\">Duration: </label>\n            <input ref={suggestDuration} type=\"text\" placeholder=\"00:00 (Hour:Min)\" id=\"len\" />\n            <button onClick={() => onAddClickSuggest()}> Add Event</button>\n          </div>\n        </td>\n        <td class=\"schedule\">\n          <div class=\"display\" align=\"center\">\n            <h1>What I have to do</h1>\n\n            <input ref={dateInput} type=\"date\" />\n\n            <div class=\"scheduleList\" align=\"center\">\n              <h2>{scheduleDict.map((dictItem) => <Schedule item={dictItem.event} startTime={dictItem.startTime} endTime={dictItem.endTime} />)}</h2>\n            </div>\n\n            <div class=\"editSchedule\" align=\"center\">\n              <input ref={eventInput} type=\"text\" placeholder=\"Input event\" data-testid=\"event_input\" />\n              <label for=\"start\">start time: </label>\n              <input ref={startTimeInput} type=\"time\" id=\"start\" data-testid=\"start_input\" />\n              <label for=\"end\">end time: </label>\n              <input ref={endTimeInput} type=\"time\" id=\"end\" data-testid=\"end_input\" />\n\n              <button onClick={() => onAddClick()}> Add Event </button>\n            </div>\n\n          </div>\n        </td>\n      </table>\n      <div class=\"Save\" align=\"center\">\n        <button onClick={() => onSaveClick()}> Save Schedule and receive suggestions</button>\n      </div>\n      <div class=\"Complete\" align=\"center\">\n        <button onClick={() => onCompleteClick()}> Complete Schedule and save to google calendar</button>\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}