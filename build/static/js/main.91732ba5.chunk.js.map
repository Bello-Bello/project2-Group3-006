{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","scheduleDict","setScheduleDict","eventInput","useRef","startTimeInput","endTimeInput","dateInput","messages","Schedule","props","item","startTime","endTime","onClick","newDict","filter","event","class","align","ref","type","map","dictItem","placeholder","for","id","newEvent","current","value","newStartTime","newEndTime","newScheduleDict","onAddClick","fetch","method","headers","body","JSON","stringify","then","response","json","data","i","message_server","length","alert","schedule_server","response_data","window","location","replace","onCompleteClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAqGeA,MAjGf,WAEE,MAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAaC,iBAAO,IACpBC,EAAiBD,iBAAO,IACxBE,EAAeF,iBAAO,IACtBG,EAAYH,iBAAO,IACnBI,EAAWJ,iBAAO,IAExB,SAASK,EAASC,GAMhB,OACE,+BAAKA,EAAMC,KAAX,SAAuBD,EAAME,UAA7B,OAA4CF,EAAMG,QAAQ,wBAAQC,QALpE,WACE,IAAMC,EAAUd,EAAae,QAAO,SAACL,GAAD,OAAUA,EAAKM,QAAUP,EAAMC,QACnET,EAAgBa,IAG0C,kBAgD9D,OACE,sBAAKG,MAAM,UAAUC,MAAM,SAA3B,UACE,iDAEA,uBAAOC,IAAKb,EAAWc,KAAK,SAE5B,qBAAKH,MAAM,eAAeC,MAAM,SAAhC,SACE,6BAAKlB,EAAaqB,KAAI,SAACC,GAAD,OAAc,cAACd,EAAD,CAAUE,KAAMY,EAASN,MAAOL,UAAWW,EAASX,UAAWC,QAASU,EAASV,iBAGvH,sBAAKK,MAAM,eAAeC,MAAM,SAAhC,UACE,uBAAOC,IAAKjB,EAAYkB,KAAK,OAAOG,YAAY,cAAc,cAAY,gBAC1E,uBAAOC,IAAI,QAAX,oCACA,uBAAOL,IAAKf,EAAgBgB,KAAK,OAAOK,GAAG,QAAQ,cAAY,gBAC/D,uBAAOD,IAAI,MAAX,kCACA,uBAAOL,IAAKd,EAAce,KAAK,OAAOK,GAAG,MAAM,cAAY,cAE3D,wBAAQZ,QAAS,kBA7DvB,WACE,IAAIa,EAAWxB,EAAWyB,QAAQC,MAC9BC,EAAezB,EAAeuB,QAAQC,MACtCE,EAAazB,EAAasB,QAAQC,MAClCG,EAAe,sBAAO/B,GAAP,CAAqB,CAAE,MAAS0B,EAAU,UAAaG,EAAc,QAAWC,KAEnG7B,EAAgB8B,GAEhB7B,EAAWyB,QAAQC,MAAQ,GAC3BxB,EAAeuB,QAAQC,MAAQ,GAC/BvB,EAAasB,QAAQC,MAAQ,GAmDFI,IAAvB,yBAEA,qBAAKf,MAAM,OAAOC,MAAM,SAAxB,SACE,wBAAQL,QAAS,WAjDvBoB,MAAM,eAAgB,CACpBC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAE,aAAgBtC,EAAc,SAAYO,MAChEgC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GACxC,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAKE,eAAeC,OAAQF,IAC9CG,MAAMJ,EAAKE,eAAeD,IAE5B1C,EAAgByC,EAAKK,qBAuCjB,sDAEF,qBAAK9B,MAAM,WAAWC,MAAM,SAA5B,SACE,wBAAQL,QAAS,kBAtCzB,WACE,IAAMmC,EAAgBX,KAAKC,UAAU,CAAE,aAAgBtC,EAAc,YAAeM,EAAUqB,QAAQC,QACtGK,MAAM,YAAa,CACjBC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMY,IACLT,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GACxCzC,EAAgByC,EAAKK,iBACrBE,OAAOC,SAASC,QAAQ,QA4BGC,IAAvB,qEC/EKC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.91732ba5.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState, useRef } from 'react';\n\n\nfunction App() {\n\n  const [scheduleDict, setScheduleDict] = useState([]);\n  const eventInput = useRef('');\n  const startTimeInput = useRef('');\n  const endTimeInput = useRef('');\n  const dateInput = useRef('');\n  const messages = useRef('');\n\n  function Schedule(props) {\n\n    function onDelete() {\n      const newDict = scheduleDict.filter((item) => item.event !== props.item);\n      setScheduleDict(newDict);\n    }\n    return (\n      <h2>{props.item} from {props.startTime} to {props.endTime}<button onClick={onDelete}>X</button></h2>\n    );\n  }\n\n  function onAddClick() {\n    let newEvent = eventInput.current.value;\n    let newStartTime = startTimeInput.current.value;\n    let newEndTime = endTimeInput.current.value;\n    let newScheduleDict = [...scheduleDict, { \"event\": newEvent, \"startTime\": newStartTime, \"endTime\": newEndTime }];\n\n    setScheduleDict(newScheduleDict);\n\n    eventInput.current.value = \"\";\n    startTimeInput.current.value = \"\";\n    endTimeInput.current.value = \"\";\n  }\n\n  function onSaveClick() {\n\n    fetch('/suggestions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ \"scheduleDict\": scheduleDict, \"messages\": messages }),\n    }).then(response => response.json()).then(data => {\n      for (let i = 0; i < data.message_server.length; i++) {\n        alert(data.message_server[i]);\n      }\n      setScheduleDict(data.schedule_server);\n    });\n  }\n\n  function onCompleteClick() {\n    const response_data = JSON.stringify({ \"scheduleDict\": scheduleDict, \"currentDate\": dateInput.current.value });\n    fetch('/complete', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: response_data,\n    }).then(response => response.json()).then(data => {\n      setScheduleDict(data.schedule_server);\n      window.location.replace(\"/\");\n    });\n\n  }\n\n  return (\n    <div class=\"display\" align=\"center\">\n      <h1>Create Schedule</h1>\n\n      <input ref={dateInput} type=\"date\" />\n\n      <div class=\"scheduleList\" align=\"center\">\n        <h2>{scheduleDict.map((dictItem) => <Schedule item={dictItem.event} startTime={dictItem.startTime} endTime={dictItem.endTime} />)}</h2>\n      </div>\n\n      <div class=\"editSchedule\" align=\"center\">\n        <input ref={eventInput} type=\"text\" placeholder=\"Input event\" data-testid=\"event_input\" />\n        <label for=\"start\">Input event start time</label>\n        <input ref={startTimeInput} type=\"time\" id=\"start\" data-testid=\"start_input\" />\n        <label for=\"end\">Input event end time</label>\n        <input ref={endTimeInput} type=\"time\" id=\"end\" data-testid=\"end_input\" />\n\n        <button onClick={() => onAddClick()}> Add Event </button>\n\n        <div class=\"Save\" align=\"center\">\n          <button onClick={() => onSaveClick()}> Save Schedule and receive suggestions</button>\n        </div>\n        <div class=\"Complete\" align=\"center\">\n          <button onClick={() => onCompleteClick()}> Complete Schedule and save to google calendar</button>\n        </div>\n\n      </div>\n    </div>\n\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}