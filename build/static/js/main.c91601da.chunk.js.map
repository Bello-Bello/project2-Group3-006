{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","scheduleDict","setScheduleDict","textInput","useRef","timeInput","Schedule","props","item","time","onClick","newDict","filter","event","console","log","class","align","map","dictItem","ref","type","placeholder","newTask","current","value","newTime","newScheduleDict","onButtonClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAoDeA,MA/Cf,WAEE,MAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAYC,iBAAO,IACnBC,EAAYD,iBAAO,IAGzB,SAASE,EAASC,GAKhB,OACE,+BAAKA,EAAMC,KAAX,OAAqBD,EAAME,KAA3B,IAAiC,wBAAQC,QAL3C,WACE,IAAMC,EAAUV,EAAaW,QAAO,SAACJ,GAAD,OAAUA,EAAKK,QAAUN,EAAMC,QACnEN,EAAgBS,IAGiB,kBAerC,OAtBAG,QAAQC,IAAId,GAuBV,qCACE,iDAEA,qBAAKe,MAAM,SAASC,MAAM,QAA1B,SACE,6BAAKhB,EAAaiB,KAAI,SAACC,GAAD,OAAc,cAACb,EAAD,CAAUE,KAAMW,EAASN,MAAOJ,KAAMU,EAASV,cAErF,sBAAKO,MAAM,eAAeC,MAAM,SAAhC,UACE,uBAAOG,IAAKjB,EAAWkB,KAAK,SAC5B,uBAAOD,IAAKf,EAAWgB,KAAK,OAAOC,YAAY,wBAC/C,wBAAQZ,QAAS,kBApBvB,WACE,IAAIa,EAAUpB,EAAUqB,QAAQC,MAC5BC,EAAUrB,EAAUmB,QAAQC,MAC5BE,EAAe,sBAAO1B,GAAP,CAAqB,CAAE,MAASsB,EAAS,KAAQG,KAEpExB,EAAgByB,GAEhBxB,EAAUqB,QAAQC,MAAQ,GAC1BpB,EAAUmB,QAAQC,MAAQ,GAYCG,IAAvB,0BChCOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c91601da.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState, useRef } from 'react';\n\n\n\nfunction App() {\n\n  const [scheduleDict, setScheduleDict] = useState([]);\n\n  const textInput = useRef('');\n  const timeInput = useRef('');\n\n  console.log(scheduleDict)\n  function Schedule(props) {\n    function onDelete() {\n      const newDict = scheduleDict.filter((item) => item.event !== props.item);\n      setScheduleDict(newDict);\n    }\n    return (\n      <h3>{props.item} at {props.time} <button onClick={onDelete}>X</button></h3>\n\n    );\n  }\n\n  function onButtonClick() {\n    let newTask = textInput.current.value;\n    let newTime = timeInput.current.value;\n    let newScheduleDict = [...scheduleDict, { \"event\": newTask, \"time\": newTime }];\n\n    setScheduleDict(newScheduleDict);\n\n    textInput.current.value = \"\";\n    timeInput.current.value = \"\";\n  }\n  return (\n    <>\n      <h1>Create Schedule</h1>\n\n      <div class=\"idList\" align=\"right\">\n        <h3>{scheduleDict.map((dictItem) => <Schedule item={dictItem.event} time={dictItem.time} />)}</h3>\n      </div>\n      <div class=\"editSchedule\" align=\"center\">\n        <input ref={textInput} type=\"text\" />\n        <input ref={timeInput} type=\"text\" placeholder=\"Input time for task\" />\n        <button onClick={() => onButtonClick()}> Add </button>\n      </div>\n    </>\n\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}