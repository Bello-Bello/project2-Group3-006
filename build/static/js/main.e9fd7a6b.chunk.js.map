{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","scheduleDict","setScheduleDict","textInput","useRef","timeInput","dateInput","messages","Schedule","props","item","time","onClick","newDict","filter","event","ref","type","class","align","map","dictItem","placeholder","newTask","current","value","newTime","newScheduleDict","onAddClick","fetch","method","headers","body","JSON","stringify","then","response","json","data","i","message_server","length","alert","schedule_server","response_data","window","location","replace","onCompleteClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOA2FeA,MArFf,WAEE,MAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAYC,iBAAO,IACnBC,EAAYD,iBAAO,IACnBE,EAAYF,iBAAO,IACnBG,EAAWH,iBAAO,IAExB,SAASI,EAASC,GAMhB,OACE,+BAAKA,EAAMC,KAAX,OAAqBD,EAAME,KAA3B,IAAiC,wBAAQC,QAL3C,WACE,IAAMC,EAAUZ,EAAaa,QAAO,SAACJ,GAAD,OAAUA,EAAKK,QAAUN,EAAMC,QACnER,EAAgBW,IAGiB,kBA8CrC,OACE,qCACE,iDAEA,uBAAOG,IAAKV,EAAWW,KAAK,SAE5B,qBAAKC,MAAM,SAASC,MAAM,SAA1B,SACE,6BAAKlB,EAAamB,KAAI,SAACC,GAAD,OAAc,cAACb,EAAD,CAAUE,KAAMW,EAASN,MAAOJ,KAAMU,EAASV,cAGrF,sBAAKO,MAAM,eAAX,UACE,uBAAOF,IAAKb,EAAWc,KAAK,OAAOK,YAAY,gBAC/C,uBAAON,IAAKX,EAAWY,KAAK,OAAOK,YAAY,kCAE/C,wBAAQV,QAAS,kBAxDvB,WACE,IAAIW,EAAUpB,EAAUqB,QAAQC,MAC5BC,EAAUrB,EAAUmB,QAAQC,MAC5BE,EAAe,sBAAO1B,GAAP,CAAqB,CAAE,MAASsB,EAAS,KAAQG,KAEpExB,EAAgByB,GAEhBxB,EAAUqB,QAAQC,MAAQ,GAC1BpB,EAAUmB,QAAQC,MAAQ,GAgDCG,IAAvB,qCACA,wBAAQhB,QAAS,WA5CrBiB,MAAM,eAAgB,CACpBC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAE,aAAgBjC,EAAc,SAAYM,MAChE4B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GACxC,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAKE,eAAeC,OAAQF,IAC9CG,MAAMJ,EAAKE,eAAeD,IAE5BrC,EAAgBoC,EAAKK,qBAkCnB,oDACA,wBAAQ/B,QAAS,kBA/BvB,WACE,IAAMgC,EAAgBX,KAAKC,UAAU,CAAE,aAAgBjC,EAAc,YAAeK,EAAUkB,QAAQC,QACtGI,MAAM,YAAa,CACjBC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMY,IACLT,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GACxCpC,EAAgBoC,EAAKK,iBACrBE,OAAOC,SAASC,QAAQ,QAqBCC,IAAvB,mECvEOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e9fd7a6b.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState, useRef } from 'react';\n\n\n\n\nfunction App() {\n\n  const [scheduleDict, setScheduleDict] = useState([]);\n  const textInput = useRef('');\n  const timeInput = useRef('');\n  const dateInput = useRef('');\n  const messages = useRef('');\n\n  function Schedule(props) {\n\n    function onDelete() {\n      const newDict = scheduleDict.filter((item) => item.event !== props.item);\n      setScheduleDict(newDict);\n    }\n    return (\n      <h3>{props.item} at {props.time} <button onClick={onDelete}>X</button></h3>\n    );\n  }\n\n  function onAddClick() {\n    let newTask = textInput.current.value;\n    let newTime = timeInput.current.value;\n    let newScheduleDict = [...scheduleDict, { \"event\": newTask, \"time\": newTime }];\n\n    setScheduleDict(newScheduleDict);\n\n    textInput.current.value = \"\";\n    timeInput.current.value = \"\";\n  }\n\n  function onSaveClick() {\n\n    fetch('/suggestions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ \"scheduleDict\": scheduleDict, \"messages\": messages }),\n    }).then(response => response.json()).then(data => {\n      for (let i = 0; i < data.message_server.length; i++) {\n        alert(data.message_server[i]);\n      }\n      setScheduleDict(data.schedule_server);\n    });\n  }\n\n  function onCompleteClick() {\n    const response_data = JSON.stringify({ \"scheduleDict\": scheduleDict, \"currentDate\": dateInput.current.value });\n    fetch('/complete', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: response_data,\n    }).then(response => response.json()).then(data => {\n      setScheduleDict(data.schedule_server);\n      window.location.replace(\"/\");\n    });\n\n  }\n\n  return (\n    <>\n      <h1>Create Schedule</h1>\n\n      <input ref={dateInput} type=\"date\" />\n\n      <div class=\"idList\" align=\"center\">\n        <h3>{scheduleDict.map((dictItem) => <Schedule item={dictItem.event} time={dictItem.time} />)}</h3>\n      </div>\n\n      <div class=\"editSchedule\">\n        <input ref={textInput} type=\"text\" placeholder=\"Input event\" />\n        <input ref={timeInput} type=\"text\" placeholder=\"Input starting time for event\" />\n\n        <button onClick={() => onAddClick()}> Add Event to Schedule </button>\n        <button onClick={() => onSaveClick()}> Save Schedule and receive suggestions</button>\n        <button onClick={() => onCompleteClick()}> Complete Schedule and save to google calendar</button>\n      </div>\n    </>\n\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}